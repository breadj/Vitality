(See 'Rectangle Circle Intersection Diagram.png' for this to make sense)
(Dark blue rectangle is the original BoundingBox, the black lines protruding from it are loci for the circle's Radius away from the edges of the BoundingBox)
(Dark grey rectangle is the BoundingBox with all sides increased by the circle's Radius (not including the curves of length 'Radius' around the corners))

1. Basic and cheap detection as to whether the circle's position is in the BoundingBox (dark blue rectangle). Green area has been checked.
2. Because rectangles are symmetrical, if the values are made relative to (0,0) and made absolute (AKA: local), only the bottom-right (+X,+Y) of the BoundingBox needs checking,
	with the circle's Centre also transformed to that position. This is what the new, temporary rectangle (orange rectangle) is, with sides of (BoundingBox.Size / 2) + Radius.
	If the new rectangle Contains(circle's local position), then continue with checking. If not, then it's not intersecting (in the purple area).
3. Create a new, smaller rectangle (light blue rectangle) on the bottom-right of the original BoundingBox (still relative to (0,0) though) with size of the circle's Radius.
	If new rectangle Contains(circle's local position), continue with checking. If not, then it is intersecting (in red area).
4. From the top-left of the new rectangle (light blue rectangle), check if the distance between that and the circle's local position is smaller than the circle's Radius.
	If it is smaller, the circle is intersecting (in lime area). If not, the circle is not intersecting (in pink area).